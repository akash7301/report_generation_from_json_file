import json
import locale
import sys
from reports import *
from reportlab.platypus import SimpleDocTemplate
from reportlab.platypus import Paragraph, Spacer, Table, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.piecharts import Pie

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data

def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data



def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  #Ílocale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  sales = {"total_sales": 0}
  best_car = {}

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # TODO: also handle max sales
    if item['total_sales'] > sales['total_sales']:
      sales = item

    if not item['total_sales'] in best_car.keys():
      best_car[item['car']['car_year']] = item['total_sales']
    else:
      best_car[item['car']['car_year']] += item['total_sales']

    all_values = best_car.values()
    max_values = max(all_values)
    max_key = max(best_car, key=best_car.get)

    # TODO: also handle most popular car_year

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
     "The {} had the most sales: {}".format(sales['car']['car_model'],sales['total_sales']),
     "The most popular year was {} with {} sales".format(max_key, max_values),
  ]

  return summary


def generate(filename, title, additional_info, table_data):


  styles = getSampleStyleSheet()
  report = SimpleDocTemplate(filename)
  report_title = Paragraph(title, styles["h1"])
  report_info = Paragraph(additional_info, styles["BodyText"])
  table_style = [('GRID', (0,0), (-1,-1), 1, colors.black),
                ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                ('ALIGN', (0,0), (-1,-1), 'CENTER')]
  report_table = Table(data=table_data, style=table_style, hAlign="LEFT")
  empty_line = Spacer(1,20)

  sale_per_model = {}
  #print(table_data)
  for data in table_data[1:]:
      #print(data)
      if data[1].split()[0] not in sale_per_model:
          sale_per_model[data[1].split()[0]] = data[3]
      else:
          sale_per_model[data[1].split()[0]] += int(data[3])
  #print(sale_per_model)
  sorted_sales = sorted(sale_per_model.items(), key=lambda kv:(kv[1],kv[0]))
  report_pie = Pie()
  report_pie.sideLabels = 1
  report_pie.checkLabelOverlap = 0
  report_pie.width = 300
  report_pie.height = 200
  report_pie.x = 120
  report_pie.y = 100

  report_pie.data = []
  report_pie.labels = []
  #print('sorted_sale '*20)
  #print(sorted_sales)
  for item in sorted_sales:
      report_pie.data.append(item[1])
      report_pie.labels.append(item[0])

  print(len(set(report_pie.labels)))
  report_chart = Drawing(500,500)
  report_chart.add(report_pie)
  report.build([report_title, empty_line, report_info, empty_line, report_table,report_chart])



def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  new_summary = '\n'.join(summary)
  print(summary)
  # TODO: turn this into a PDF report
  generate('cars.pdf', 'Cars report', new_summary, cars_dict_to_table(data))


if __name__ == "__main__":
  main(sys.argv)
